# set up the call stack
rel $stack
# while i < 10 { 
loop: lt i, $10, cond
jz cond, $done
# set return pointer for call
add $main_ret_here, $0, (0)
# set argument to i
add i, $0, (2)
# call fac(i)
jz $0, $fac
main_ret_here: out (1) # print return value
add $1, i, i
jz $0, $loop
# } end while
done: hlt
i: $0
cond: $0
# fac (n) {
fac: eq $0, $0, (1) # set SP + 1 = 1 (return value)
# SP + 0 is our return address
# SP + 1 is our return value
# SP + 2 is our (only) argument
# cnd = n < 1
lt (2), $1, (3) # SP + 3 is a local
# if (cnd) return 1
fac_ret_1: jnz (3), (0)
# set up for recursive call
fac_rec: rel $4 # bump stack pointer
# clear and set return pointer
add $ret_here, $0, (0)
# return value is at (1)
# set argument to n - 1
# (-2) = (2) - (4)
add (-2), $-1, (2)
# make recursive call
jz $0, $fac
# again, (-2) = (2) - (4)
#   and  (-3) = (1) - (4)
# return n * fac(n - 1)
ret_here: mul (1), (-2), (-3)
rel $-4 # reset SP to initial value
fac_ret: jz $0, (0)
# }
stack: $0
