# an indirect-threaded mini-FORTH on intcode [WIP]

rel $2048 # stack starts at addr 2048 - allows ~ 2kw of heap
jz $0, $_next

ip: $cold_start
cw: $0

var_base: $10
var_latest: $bye_link
var_state: $0 # 0 = execute, 1 = compile
var_here: $heap

cold_start: $quit

# DOCOL is the inner interpreter
docol: add $0, rstack_bp, docol_push_target
add $0, ip, docol_push_target: 0
add $1, rstack_bp, rstack_bp
add $1, cw, ip
jz $0, $_next

# each word's layout is:
# link to previous word
# hidden flag
# immediate flag
# ASCIP name
# codeword
# code...

# first come variables

base_link: $0
$0
$0
.ascip "BASE" # (-- base)
base: $base_code
base_code: rel $1
add $0, $var_base, (0)
jz $0, $_next

latest_link: $base_link
$0
$0
.ascip "LATEST" # (-- latest)
latest: $latest_code
latest_code: rel $1
add $0, $var_latest, (0)
jz $0, $_next

state_link: $latest_link
$0
$0
.ascip "STATE" # (-- state)
state: $state_code
state_code: rel $1
add $0, $var_state, (0)
jz $0, $_next

here_link: $state_link
$0
$0
.ascip "HERE" # (-- here)
here: $here_code
here_code: rel $1
add $0, $var_here, (0)
jz $0, $_next

# then come proper words

double_link: $here_link
$0
$0
.ascip "DOUBLE" # (n -- n)
double: $docol
$dup
$plus
$exit

quadruple_link: $double_link
$0
$0
.ascip "QUADRUPLE" # (n -- n)
quadruple: $docol
$double
$double
$exit

lit_link: $quadruple_link
$0
$0
.ascip "LIT" # ( -- n)
lit: $lit_code
lit_code: rel $1
add $0, ip, lit_src
add $0, lit_src: 0, (0)
add $1, ip, ip
jz $0, $_next

drop_link: $lit_link
$0
$0
.ascip "DROP" # (x -- )
drop: $drop_code
drop_code: rel $-1
jz $0, $_next

dup_link: $drop_link
$0
$0
.ascip "DUP" # (x -- x x)
dup: $dup_code
dup_code: rel $1
add $0, (-1), (0)
jz $0, $_next

twodrop_link: $dup_link
$0
$0
.ascip "2DROP" # (x y -- )
twodrop: $twodrop_code
twodrop_code: rel $-2
jz $0, $_next

twodup_link: $twodrop_link
$0
$0
.ascip "2DUP" # (x y -- x y x y)
twodup: $twodup_code
twodup_code: rel $2
add $0, (-3), (-1)
add $0, (-2), (0)
jz $0, $_next

plus_link: $twodup_link
$0
$0
.ascip "+" # (n1 n2 -- n1 + n2)
plus: $plus_code
plus_code: add (-1), (0), (-1)
rel $-1
jz $0, $_next

minus_link: $plus_link
$0
$0
.ascip "-" # (n1 n2 -- n1 - n2)
minus: $minus_code
minus_code: mul $-1, (0), (0)
add (-1), (0), (-1)
rel $-1
jz $0, $_next

mult_link: $minus_link
$0
$0
.ascip "*" # (n1 n2 -- n1 * n2)
mult: $mult_code
mult_code: mul (-1), (0), (-1)
rel $-1
jz $0, $_next

incr_link: $mult_link
$0
$0
.ascip "1+" # (n -- n + 1)
incr: $incr_code
incr_code: add $1, (0), (0)
jz $0, $_next

decr_link: $incr_link
$0
$0
.ascip "1-" # (n -- n - 1)
decr: $decr_code
decr_code: add $-1, (0), (0)
jz $0, $_next

equals_link: $decr_link
$0
$0
.ascip "=" # (n1 n2 -- n1 = n2)
equals: $equals_code
equals_code: eq (-1), (0), (-1)
rel $-1
jz $0, $_next

lessthan_link: $equals_link
$0
$0
.ascip "<" # (n1 n2 -- n1 < n2)
lessthan: $lessthan_code
lessthan_code: lt (-1), (0), (-1)
rel $-1
jz $0, $_next

store_link: $lessthan_link
$0
$0
.ascip "!" # (val addr --)
store: $store_code
store_code: add $0, (0), store_dst
add $0, (-1), store_dst: 0
rel $-2
jz $0, $_next

fetch_link: $store_link
$0
$0
.ascip "@" # (addr -- val)
fetch: $fetch_code
fetch_code: add $0, (0), fetch_src
add $0, fetch_src: 0, (0)
jz $0, $_next

rspstore_link: $fetch_link
$0
$0
.ascip "RSP!" # (new-rsp --)
rspstore: $rspstore_code
rspstore_code: add $0, (0), rstack_bp
rel $-1
jz $0, $_next

rspfetch_link: $rspstore_link
$0
$0
.ascip "RSP@" # (-- rsp)
rspfetch: $rspfetch_code
rspfetch_code: rel $1
add $0, rstack_bp, (0)
jz $0, $_next

emit_link: $rspfetch_link
$0
$0
.ascip "EMIT" # (chr --)
emit: $emit_code
emit_code: out (0)
rel $-1
jz $0, $_next

tell_link: $emit_link
$0
$0
.ascip "TELL" # (ptr len --)
tell: $tell_code
tell_code: jz (0), $tell_ret
add $0, (-1), tell_ptr
out tell_ptr: 0
add $1, (-1), (-1)
add $-1, (0), (0)
jz $0, $tell_code
tell_ret: rel $-2
jz $0, $_next

key_link: $tell_link
$0
$0
.ascip "KEY" # (-- chr)
key: $key_code
key_code: rel $1
in (0)
jz $0, $_next

word_link: $key_link
$0
$0
.ascip "WORD" # (-- ptr len)
word: $word_code
word_code: rel $1
add $0, $word_ret, (0)
jz $0, $_word
word_ret: jz $0, $_next

_word: add $0, (0), _word_rip
rel $-1 # pop rip
rel $3 # (ptr len tmp)
add $0, $0, (-1) # length
add $0, $0, (-2) # temporary for now...
_word_skip_blanks: in (0)
# skip tab
eq (0), $9, (-2)
jnz (-2), $_word_skip_blanks
# skip space
eq (0), $32, (-2)
jnz (-2), $_word_skip_blanks
# skip LF
eq (0), $10, (-2)
jnz (-2), $_word_skip_blanks
# skip CR
eq (0), $13, (-2)
jnz (-2), $_word_skip_blanks
# else...
jz $0, $_word_valid_char
_word_til_blank: in (0)
eq (0), $9, (-2)
jnz (-2), $_word_ret
eq (0), $32, (-2)
jnz (-2), $_word_ret
eq (0), $10, (-2)
jnz (-2), $_word_ret
eq (0), $13, (-2)
jnz (-2), $_word_ret
_word_valid_char: add (-1), $_word_buf, _word_dst
add $0, (0), _word_dst: 0
add $1, (-1), (-1)
# check length!
eq (-1), $32, (-2)
jnz (-2), $_word_ret
jz $0, $_word_til_blank
_word_ret: rel $-1
add $0, $_word_buf, (-1)
jz $0, _word_rip: $0

_word_buf: .zeroes 32

number_link: $word_link
$0
$0
.ascip "NUMBER" # (ptr len -- num n-unparsed)
number: $number_code
number_code: rel $1
add $0, $number_ret, (0)
jz $0, $_number
number_ret: jz $0, $_next

_number: add $0, (0), _number_rip
rel $-1 # pop rip
rel $5 # temporaries: num n-unparsed char cnd neg
add $0, $0, (-3)
add $0, $0, (-4)
jz (-5), $_number_ret # fail if 0-length input
add $0, (-6), _number_first
eq $45, _number_first: 0, (0) # check for negative sign
jz (0), $_number_loop
# skip negative sign
add $-1, (-5), (-5)
add $1, (-6), (-6)

_number_loop: jz (-5), $_number_ret
add $0, (-6), _number_src
add $0, _number_src: 0, (-2)
lt (-2), $48, (-1)
jnz (-1), $_number_fail
lt (-2), $58, (-1)
jnz (-1), $_number_digit
lt (-2), $65, (-1)
jnz (-1), $_number_fail
lt (-2), $91, (-1)
jnz (-1), $_number_alpha
jz $0, $_number_fail

_number_digit: add $-48, (-2), (-2)
jz $0, $_number_accum

_number_alpha: add $-55, (-2), (-2)
jz $0, $_number_accum

_number_accum: lt (-2), var_base, (-1)
jz (-1), $_number_fail
mul (-4), var_base, (-4)
add (-4), (-2), (-4)
add $-1, (-5), (-5)
add $1, (-6), (-6)
jz $0, $_number_loop

_number_fail: add $0, (-5), (-3)
_number_ret: jz (0), $_number_no_negate
mul $-1, (-4), (-4)
_number_no_negate: rel $-5
add $0, (1), (-1)
add $0, (2), (0)
jz $0, _number_rip: $0

find_link: $number_link
$0
$0
.ascip "FIND" # (ptr len -- dict-ptr)
find: $find_code
find_code: rel $1
add $0, $find_ret, (0)
jz $0, $_find
find_ret: jz $0, $_next

_find: add $0, (0), _find_rip
rel $-1
rel $3 # temporaries: cur_ptr cnd count
add $0, var_latest, (-2)
_find_loop: eq $0, (-2), (-1)
jnz (-1), $_find_ret

# load hidden flag and test
add $1, (-2), _find_hidden_ptr
jnz _find_hidden_ptr: 0, $_find_next

# skip if length doesn't match
add $3, (-2), _find_len
eq _find_len: 0, (-3), (-1)
jz (-1), $_find_next

# loop and check each char
add $0, $0, (0)
_find_inner_loop: eq (-3), (0), (-1)
jnz (-1), $_find_ret
add $4, (-2), _find_word_name_ptr
add _find_word_name_ptr, (0), _find_word_name_ptr
add (-4), (0), _find_sought_name_ptr
eq _find_word_name_ptr: 0, _find_sought_name_ptr: 0, (-1)
jz (-1), $_find_next
add $1, (0), (0)
jz $0, $_find_inner_loop

_find_next: add $0, (-2), _find_next_link
add $0, _find_next_link: 0, (-2)
jz $0, $_find_loop

_find_ret: add $0, (-2), (-4)
rel $-4
jz $0, _find_rip: $0

cfa_link: $find_link
$0
$0
.ascip ">CFA" # (dict-ptr -- codeword-ptr)
cfa: $cfa_code
cfa_code: rel $1
add $0, $cfa_ret, (0)
jz $0, $_cfa
cfa_ret: jz $0, $_next

_cfa: add $0, (0), _cfa_rip
rel $-1
add $3, (0), _cfa_len_ptr
# codeword is at link + 4 + name-length
add _cfa_len_ptr, _cfa_len_ptr: 0, (0)
add $1, (0), (0)
jz $0, _cfa_rip: $0

dfa_link: $cfa_link
$0
$0
.ascip ">DFA" # (dict-ptr -- data-ptr)
dfa: $docol
$cfa
$incr
$exit

# somewhat more "magic" words

create_link: $dfa_link
$0
$0
.ascip "CREATE" # (ptr len --)
create: $create_code
create_code: add $0, var_here, create_link_dst
add $0, var_latest, create_link_dst: 0
add $0, var_here, var_latest
add $1, var_here, create_hidden_dst
add $0, $0, create_hidden_dst: 0
add $2, var_here, create_imm_dst
add $0, $0, create_imm_dst: 0
add $3, var_here, create_len_dst
add $0, (0), create_len_dst: 0
add $4, var_here, var_here
create_copy_loop: jz (0), $create_ret
add $0, (-1), create_char_src
add $0, var_here, create_char_dst
add $0, create_char_src: 0, create_char_dst: 0
add $-1, (0), (0)
add $1, (-1), (-1)
add $1, var_here, var_here
jz $0, $create_copy_loop
create_ret: rel $-2
jz $0, $_next

comma_link: $create_link
$0
$0
.ascip "," # (ptr --)
comma: $comma_code
comma_code: rel $1
add $0, $comma_ret, (0)
jz $0, $_comma
comma_ret: jz $0, $_next

_comma: add $0, (0), _comma_rip
rel $-1
add $0, var_here, comma_dst
add $0, (0), comma_dst: 0
add $1, var_here, var_here
rel $-1
jz $0, _comma_rip: $0

lbrac_link: $comma_link
$0
$1 # is immediate
.ascip "[" # (--)
lbrac: $lbrac_code
lbrac_code: add $0, $0, var_state
jz $0, $_next

rbrac_link: $lbrac_link
$0
$0
.ascip "[" # (--)
rbrac: $rbrac_code
rbrac_code: add $0, $1, var_state
jz $0, $_next

colon_link: $rbrac_link
$0
$0
.ascip ":" # (--)
colon: $docol
$word
$create
$lit
$docol
$comma
$latest
$fetch
$hidden
$rbrac
$exit

semicolon_link: $colon_link
$0
$1 # immediate
.ascip ";" # (--)
semicolon: $docol
$lit
$exit
$comma
$latest
$fetch
$hidden
$lbrac
$exit

hidden_link: $semicolon_link
$0
$0
.ascip "HIDDEN" # (dict-ptr --)
hidden: $hidden_code
hidden_code: add $1, (0), hidden_ptr
jz hidden_ptr: 0, $hidden_set
add $0, $0, (0)
jz $0, $hidden_write
hidden_set: add $1, $0, (0)
hidden_write: add $0, hidden_ptr, hidden_ptr2
add $0, (0), hidden_ptr2: 0
rel $-1
jz $0, $_next

hide_link: $hidden_link
$0
$0
.ascip "HIDE" # (--)
hide: $docol
$word
$find
$hidden
$exit

immediate_link: $hide_link
$0
$0
.ascip "IMMEDIATE" # (--)
immediate: $immediate_code
immediate_code: rel $1
add $2, var_latest, immed_ptr
jz immed_ptr: 0, $immed_set
add $0, $0, (0)
jz $0, $immed_write
immed_set: add $1, $0, (0)
immed_write: add $0, immed_ptr, immed_ptr2
add $0, (0), immed_ptr2: 0
rel $-1
jz $0, $_next

branch_link: $immediate_link
$0
$0
.ascip "BRANCH" # (--)
branch: $branch_code
branch_code: add $0, ip, branch_src
add ip, branch_src: 0, ip
jz $0, $_next

quit_link: $branch_link
$0
$0
.ascip "QUIT" # (--)
quit: $docol
$lit
$rstack
$rspstore
$interpret
$branch
$-2

interpret_link: $quit_link
$0
$0
.ascip "INTERPRET" # (--)
interpret: $interpret_code
interpret_code: rel $1
add $0, $interpret_r1, (0)
jz $0, $_word # stack now at + 2
interpret_r1: add $0, $0, interpret_is_num
add $0, (-1), interpret_word_ptr
add $0, (0), interpret_word_len

rel $1
add $0, $interpret_r2, (0)
jz $0, $_find # stack now at + 1
interpret_r2: jz (0), $interpret_number
add $2, (0), interpret_immed_ptr
jnz interpret_immed_ptr: 0, $interpret_exec
jz $0, $interpret_not_number

interpret_number: add $1, $0, interpret_is_num
rel $2
add $0, interpret_word_ptr, (-2)
add $0, interpret_word_len, (-1)
add $0, $interpret_r3, (0)
jz $0, $_number # stack now at + 2
interpret_r3: jnz (0), $interpret_fail
rel $-1 # stack now at + 1
add $0, (0), interpret_word_len # use to store number...
add $0, $lit_link, (0) # and make LIT the link ptr

interpret_not_number: jz var_state, $interpret_exec

# compile
rel $1
add $0, $interpret_r4, (0)
jz $0, $_cfa # load codeword ptr
interpret_r4: rel $1
add $0, $interpret_r5, (0)
jz $0, $_comma # stack now at +0
interpret_r5: jz interpret_is_num, $interpret_compile_done
# if literal, write LIT then number
rel $2
add $0, interpret_word_len, (-1)
add $0, $interpret_compile_done, (0)
jz $0, $_comma # stack now at + 0
interpret_compile_done: jz $0, $_next

interpret_exec: jnz interpret_is_num, $interpret_exec_lit
rel $1
add $0, $interpret_r6, (0)
jz $0, $_cfa # load codeword ptr
# jmp to **codeword
interpret_r6: add $0, (0), interpret_exec_jmp1
rel $-1
add $0, interpret_exec_jmp1, cw
add $0, interpret_exec_jmp1: 0, interpret_exec_jmp2
jz $0, interpret_exec_jmp2: $0 # stack now at + 0

interpret_exec_lit: add $0, interpret_word_len, (0) # stack still at + 1
jz $0, $_next

# TODO
interpret_fail: out $33
out $33
out $10
jz $0, $_next

interpret_is_num: $0
interpret_word_len: $0
interpret_word_ptr: $0

exit_link: $interpret_link
$0
$0
.ascip "EXIT"
exit: $exit_code
exit_code: add $-1, rstack_bp, rstack_bp
add $0, rstack_bp, exit_pop_src
add $0, exit_pop_src: 0, ip
jz $0, $_next

bye_link: $exit_link
$0
$0
.ascip "BYE"
bye: $bye_code
bye_code: hlt

_next: add $0, ip, _jnext1
add $0, _jnext1: 0, _jnext2
add $1, ip, ip
add $0, _jnext2, cw
jz $0, _jnext2: 0

# assumption: data stack will be larger than return stack
# return stack will have a max capacity of 64
rstack_bp: $rstack
rstack: .zeroes 64

# "heap" goes here...
heap: $0
