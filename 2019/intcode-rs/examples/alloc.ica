rel stack_start

add $0, $_r1, (0)
add $0, $text, (1)
jz $0, $strlen
_r1: add $1, (2), size

add $0, $_r2, (0)
add $0, size, (1)
jz $0, $alloc
_r2: add $0, (2), text_copy

add $0, $_r3, (0)
add $0, text_copy, (1)
add $0, $text, (2)
add $0, size, (3)
jz $0, $memcpy

_r3: add $0, $_r4, (0)
add $0, text_copy, (1)
jz $0, $printz

_r4: add $0, $_r5, (0)
add $0, text_copy, (1)
jz $0, $free

_r5: add $0, $_r6, (0)
add $0, size, (1)
jz $0, $alloc
_r6: add $0, (2), text_copy

add $0, $_r7, (0)
add $0, text_copy, (1)
add $0, $text, (2)
add $0, size, (3)
jz $0, $memcpy

_r7: add $0, $_r8, (0)
add $0, text_copy, (1)
jz $0, $printz

# a little alloc-and-free, to mess up the freelist

# "forget" to free text_copy...

_r8: add $0, $_r9, (0)
add $0, $3, (1)
jz $0, $alloc
_r9: add $0, (2), waste3

# ... until here
add $0, $_r10, (0)
add $0, text_copy, (1)
jz $0, $free
_r10: add $0, $_r12, (0)
add $0, waste3, (1)
jz $0, $free

_r12: add $0, $_r13, (0)
add $0, size, (1)
jz $0, $alloc
_r13: add $0, (2), text_copy

add $0, $_r14, (0)
add $0, text_copy, (1)
add $0, $text, (2)
add $0, size, (3)
jz $0, $memcpy

_r14: add $0, $_r15, (0)
add $0, text_copy, (1)
jz $0, $printz

_r15: hlt

text: .asciz "hello world\n"
size: $0
text_copy: $0
waste3: $0
stack_start: $1048576
next_alloc: $heap
free_list: $0

# strlen(asciz) -> size
strlen: add $0, $0, (2)
strlen_loop: add $0, (1), strlen_ptr
add $0, strlen_ptr: 0, (3)
jz (3), $strlen_ret
add $1, (1), (1)
add $1, (2), (2)
jz $0, $strlen_loop
strlen_ret: jz $0, (0)

# memcpy(dst, src, size)
memcpy: jz (3), $memcpy_ret
add $0, (1), memcpy_dst_ptr
add $0, (2), memcpy_src_ptr
add $0, memcpy_src_ptr: 0, memcpy_dst_ptr: 0
add $1, (1), (1)
add $1, (2), (2)
add $-1, (3), (3)
jz $0, $memcpy
memcpy_ret: jz $0, (0)

# alloc(size) -> ptr
alloc: rel $3
add $0, $alloc_ret_1, (0)
add $0, (-2), (1)
jz $0, $alloc_freelist
alloc_ret_1: add $0, (2), (-1)
rel $-3
jnz (2), $alloc_ret
add $2, next_alloc, (2)
add next_alloc, (1), next_alloc
add $2, next_alloc, next_alloc
add $-2, (2), alloc_size_ptr
add $0, (1), alloc_size_ptr: 0
alloc_ret: jz $0, (0)

# free(ptr)
free: add $-1, (1), free_link_ptr
add $0, free_list, free_link_ptr: 0
add $-1, free_link_ptr, free_list
jz $0, (0)

# alloc_freelist(size) -> ptr
alloc_freelist: add $0, $0, (2) # null return, by default
add $0, free_list, (3) # (3) is ptr to current freelist entry
add $0, $0, (4) # (4) is ptr to next ptr of previous freelist entry
alloc_freelist_loop: jz (3), $alloc_freelist_ret
add $0, (3), free_size_lt
add $0, (3), free_size_eq
add $1, (3), free_next
add $2, (3), free_ptr
# if more than enough available, return block
lt (1), free_size_lt: 0, (5) # (5) is tmp
jnz (5), $alloc_freelist_avail
# if just enough available, return block
eq (1), free_size_eq: 0, (5)
jnz (5), $alloc_freelist_avail
# not enough, advance through list
add $0, free_next, (4)
add $0, free_next: 0, (3)
jz $0, $alloc_freelist_loop
alloc_freelist_avail: jz (4), $alloc_freelist_avail_no_prev
add $0, (4), alloc_freelist_prev_next_ptr
add $0, free_next, alloc_freelist_free_next_ptr
add $0, alloc_freelist_free_next_ptr: 0, alloc_freelist_prev_next_ptr: 0
jz $0, $alloc_freelist_avail_ret
alloc_freelist_avail_no_prev: add $0, $0, free_list
alloc_freelist_avail_ret: add $0, free_ptr: $0, (2)
alloc_freelist_ret: jz $0, (0)

# printz(asciz)
printz: add $0, (1), printz_ptr
add printz_ptr: 0, $0, (2)
jz (2), $printz_ret
out (2)
add $1, (1), (1)
jz $0, $printz
printz_ret: jz $0, (0)

heap: $0
